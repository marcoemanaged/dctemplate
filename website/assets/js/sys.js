//global values 

var data = {}; //this holds all the items generated by the view handler

//core functions 

function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
    var expires = "expires=" + d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}

var toFloat = function (val, def) {

    if (val == '') { return def }

    val = val.replace("%", "").replace("px", "")
    var v = parseFloat(val);

    if (isNaN(v)) { return def }

    return v;
}


function absPos(element, parent, ps) {
    var elem = $(element)[0];
    if (!elem) {
        return;
    }
    var boundries = elem.getBoundingClientRect();

    var coords = {
        left: parseInt(boundries.left),
        right: parseInt(boundries.right),
        top: boundries.top,
        bottom: boundries.bottom,
        height: boundries.bottom - boundries.top,
        width: boundries.right - boundries.left,
        elem: elem
    };

    var css = currCSS(elem);

    var padding = {
        top: toFloat(css['padding-top']),
        left: toFloat(css['padding-left']),
        bottom: toFloat(css['padding-bottom']),
        right: toFloat(css['padding-right'])
    }

    var margin = {
        top: toFloat(css['margin-top']),
        left: toFloat(css['margin-left']),
        bottom: toFloat(css['margin-bottom']),
        right: toFloat(css['margin-right'])
    }

    coords.p = {
        left: coords.left - padding.left,
        right: coords.right + padding.right,
        top: coords.top - padding.top,
        bottom: coords.bottom + padding.bottom,
        width: coords.width + padding.left + padding.right,
        height: coords.height + padding.bottom + padding.top,
    }

    coords.m = {
        left: coords.left - margin.left,
        right: coords.right + margin.right,
        top: coords.top - margin.top,
        bottom: coords.bottom + margin.bottom,
        width: coords.width + margin.left + margin.right,
        height: coords.height + margin.bottom + margin.top,
    }

    coords.ex = {
        width: coords.width - padding.left - padding.right,
        height: coords.height - padding.bottom - padding.top,
    }

    coords.full = {
        width: coords.width + padding.left + padding.right + margin.left + margin.right,
        height: coords.height + padding.bottom + padding.top + margin.bottom + margin.top,
    }

    if (parent) {
        var p = absPos(parent);
        coords.left = coords.left - p.left;
        coords.top = coords.top - p.top;
    }

    return coords;
}



function gt(prefix, e, onlyDown) {
    if (!e) { return []; }

    var target = e.length ? $(e) : typeof (e.target) != 'undefined' ? $(e.target) : e;
    var rslt = target;

    if (!target.is(prefix)) {
        rslt = target.parents(prefix);
    }

    if (!rslt.length && !onlyDown) {
        rslt = $(prefix, target);
    }

    return rslt.first();
}

var getIDNum = function (prefix) {
    var date = new Date();
    var rnd = Math.floor((Math.random() * 10000) + 1);

    var num = date.getMonth() + "" + date.getDate() + "" + date.getHours() + "" + date.getMinutes() + "" + date.getSeconds() + "" + date.getMilliseconds() + "" + rnd;
    return parseInt(num / 5);
}

var toChunk = function (left, length, total, uploaded) {
    var block = (1 / total) * 100; //25
    var step = (uploaded / total) * 100; //25

    var chunk = true ? ((left / length) * 100) : ((length - left) / length) * 100; //10%

    var per = (step - block) + ((block / 100) * chunk);

    return {
        chunk: parseInt(chunk),
        per: parseInt(per)
    }
}

var getWindowXY = function () {
    var myWidth = 0, myHeight = 0;
    if (typeof (window.innerWidth) == 'number') {
        //Non-IE
        myWidth = window.innerWidth;
        myHeight = window.innerHeight;
    } else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
        //IE 6+ in 'standards compliant mode'
        myWidth = document.documentElement.clientWidth;
        myHeight = document.documentElement.clientHeight;
    } else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
        //IE 4 compatible
        myWidth = document.body.clientWidth;
        myHeight = document.body.clientHeight;
    }
    return {
        h: myHeight,
        w: myWidth
    }
}

var isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function () {
        return navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i);
    },
    any: function () {
        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
    }
};

function currCSS(elem) {
    var elem = $(elem).first()[0];
    if (!elem) { return; }

    if (window.getComputedStyle) {
        var compStyle = window.getComputedStyle(elem, "");
    }
    else {
        var compStyle = elem.currentStyle;
    }

    var parse = function (attr) {
        return parseFloat(attr.replace("px", ""));
    }


    var marginTop = parse(compStyle.marginTop);
    var marginLeft = parse(compStyle.marginLeft);
    var marginRight = parse(compStyle.marginRight);
    var marginBottom = parse(compStyle.marginBottom);

    var paddingTop = parse(compStyle.paddingTop);
    var paddingLeft = parse(compStyle.paddingLeft);
    var paddingRight = parse(compStyle.paddingRight);
    var paddingBottom = parse(compStyle.paddingBottom);

    compStyle.calc = {};

    compStyle.calc.padding = paddingTop + paddingLeft + paddingRight + paddingBottom;
    compStyle.calc.margin = marginTop + marginLeft + marginRight + marginBottom;

    return compStyle;
}

var KEY = {
    ESC: 27,
    ENTER: 13,
    TAB: 9,
    DEL: 46,
    BACKSPACE: 8,
    ARROW_DOWN: 40,
    ARROW_UP: 38,
    ARROW_LEFT: 37,
    ARROW_RIGHT: 39,
    F1: 112,
    CTRL: 17,
    SPACE: 32
}


//overrides basic behaviour with new capabilities
String.prototype.format = function (args) {
    var formatted = this;

    if ((typeof args == "object")) {
        for (var i = 0; i < args.length; i++) {
            var regexp = new RegExp('\\{' + i + '\\}', 'gi');
            formatted = formatted.replace(regexp, args[i]);
        }
    } else {
        for (var i = 0; i < arguments.length; i++) {
            var regexp = new RegExp('\\{' + i + '\\}', 'gi');
            formatted = formatted.replace(regexp, arguments[i]);
        }
    }


    return formatted;
};

String.prototype.indexOfArr = function (arr) {
    for (i = 0; i < arr.length; i++) {
        if (this.indexOf(arr[i]) != -1) {
            return true;
        }
    }
    return false;
}

String.prototype.splice = function (idx, rem, str) {
    return this.slice(0, idx) + str + this.slice(idx + Math.abs(rem));
};


String.prototype.encode = function (val) {
    return Base64.encode(val);
}

String.prototype.decode = function (val) {
    return Base64.decode(val);
}

Date.prototype.toNiceString = function () {
    var dt = this;
    var yyyy = dt.getFullYear();
    var MM = dt.getMonth() + 1;
    var dd = dt.getDate();

    var hh = dt.getHours();
    var mm = dt.getMinutes();

    var fix = (n) => {
        if (n < 10) { return '0' + n } return n;
    }

    MM = fix(MM);
    dd = fix(dd);
    hh = fix(hh);
    mm = fix(mm);

    return '{0}/{1}/{2} {3}:{4}'.format(MM, dd, yyyy, hh, mm);
}

var Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (e) { var t = ""; var n, r, i, s, o, u, a; var f = 0; e = Base64._utf8_encode(e); while (f < e.length) { n = e.charCodeAt(f++); r = e.charCodeAt(f++); i = e.charCodeAt(f++); s = n >> 2; o = (n & 3) << 4 | r >> 4; u = (r & 15) << 2 | i >> 6; a = i & 63; if (isNaN(r)) { u = a = 64 } else if (isNaN(i)) { a = 64 } t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a) } return t }, decode: function (e) { var t = ""; var n, r, i; var s, o, u, a; var f = 0; e = e.replace(/\\+\\+[++^A-Za-z0-9+/=]/g, ""); while (f < e.length) { s = this._keyStr.indexOf(e.charAt(f++)); o = this._keyStr.indexOf(e.charAt(f++)); u = this._keyStr.indexOf(e.charAt(f++)); a = this._keyStr.indexOf(e.charAt(f++)); n = s << 2 | o >> 4; r = (o & 15) << 4 | u >> 2; i = (u & 3) << 6 | a; t = t + String.fromCharCode(n); if (u != 64) { t = t + String.fromCharCode(r) } if (a != 64) { t = t + String.fromCharCode(i) } } t = Base64._utf8_decode(t); return t }, _utf8_encode: function (e) { e = e.replace(/\r\n/g, "n"); var t = ""; for (var n = 0; n < e.length; n++) { var r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r) } else if (r > 127 && r < 2048) { t += String.fromCharCode(r >> 6 | 192); t += String.fromCharCode(r & 63 | 128) } else { t += String.fromCharCode(r >> 12 | 224); t += String.fromCharCode(r >> 6 & 63 | 128); t += String.fromCharCode(r & 63 | 128) } } return t }, _utf8_decode: function (e) { var t = ""; var n = 0; var r = c1 = c2 = 0; while (n < e.length) { r = e.charCodeAt(n); if (r < 128) { t += String.fromCharCode(r); n++ } else if (r > 191 && r < 224) { c2 = e.charCodeAt(n + 1); t += String.fromCharCode((r & 31) << 6 | c2 & 63); n += 2 } else { c2 = e.charCodeAt(n + 1); c3 = e.charCodeAt(n + 2); t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63); n += 3 } } return t } }


function getTimezoneOffset() {
    function z(n) { return (n < 10 ? '0' : '') + n }
    var offset = new Date().getTimezoneOffset();
    var sign = offset < 0 ? '+' : '-';
    offset = Math.abs(offset);
    var o = z(offset / 60 | 0);

    return sign == '+' ? parseInt(o) : parseInt(o * -1);
}


var sortByParams = function (arr, params) {
    var params = params;

    arr.sort((a, b) => {
        for (var i = 0; i < params.length; i++) {
            var f = params[i].name;
            var dir = params[i].direction;

            if (a[f] == b[f]) {
                continue;
            }
            else {
                return dir;
            }
        }
    })
}


var DateX = function () {
    var buffer = [];
    for (var i = 0; i < arguments.length; i++) {
        buffer.push('"{0}"'.format(arguments[i]));
    }

    var d = eval('new Date({0})'.format(buffer.join(',')));

    d.setHours(12);
    d.setMinutes(30);
    return d;
};

function bytesToSize(bytes) {
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes == 0) return '0 Byte';
    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}

function makeid(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

function copyToClipboard(input) {
    if (input) {
        /* Select the text field */
        var dis = $(input).attr('disabled');

        if (dis == 'disabled') {
            $(input).removeAttr('disabled');
        }
        input.select();
        input.setSelectionRange(0, 99999); /*For mobile devices*/

        /* Copy the text inside the text field */
        document.execCommand("copy");


        if (dis == 'disabled') {
            $(input).attr('disabled', 'disabled');
        }
    }
}

function isVisibleInside(wrap, elem, offset) {
    var offset = offset || 4;
    var wrap = wrap || window;
    var docViewTop = absPos($(wrap)).top;
    var docViewBottom = docViewTop + $(wrap).height();

    var elemTop = absPos($(elem)).top;
    var elemBottom = elemTop + $(elem)[0].offsetHeight;

    elemTop += offset * $(elem)[0].offsetHeight;
    elemBottom -= offset * $(elem)[0].offsetHeight;

    return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
}

function getDaysInMonth(month, year) {


    var date = new Date(year, month, 1);
    var days = [];
    while (date.getMonth() === month) {
        days.push(new Date(date));
        date.setDate(date.getDate() + 1);
    }

    var weekDays = {
        'd0': { s: 'S', m: 'Sun', f: 'Sunday' },
        'd1': { s: 'M', m: 'Mon', f: 'Monday' },
        'd2': { s: 'T', m: 'Tue', f: 'Tuesday' },
        'd3': { s: 'W', m: 'Wed', f: 'Wednesday' },
        'd4': { s: 'T', m: 'Thu', f: 'Thursday' },
        'd5': { s: 'F', m: 'Fri', f: 'Friday' },
        'd6': { s: 'S', m: 'Sat', f: 'Saturday' },
    }

    var list = [];

    days.forEach(d => {
        list.push({
            weekday: d.getDay(),
            day: d.getDate(),
            date: d
        })
    });

    return list;
}


JSON.toQuery = function (json) {
    var buffer = [];

    var index = 0;
    for (var x in json) {
        if (index > 0) {
            buffer.push('&');
        }
        buffer.push('{0}={1}'.format(x, json[x]));

        index++;
    }

    return buffer.join('');
}

Array.prototype.forEachAsync = function (func, callback, onstep, isSendRows) {

    var list = this;
    var total = list.length;

    var call = () => {
        var next = list.splice(0, 1000);
        if (next.length) {
            if (isSendRows) {
                func(next);
            } else {
                next.forEach(func);
            }

            if (onstep) {
                var per = parseInt(((total - list.length) / total) * 100);
                onstep(per, total, list.length);
            }
            setTimeout(call, 200);
        } else {
            callback();
        }

    }
    call();
}

String.prototype.indexOfArr = function (arr) {
    for (i = 0; i < arr.length; i++) {
        if (this.indexOf(arr[i]) != -1) {
            return true;
        }
    }
    return false;
}

String.prototype.isEqual = function (arr, isExact) {
    for (i = 0; i < arr.length; i++) {
        if (isExact) {
            if (this == arr[i]) {
                return true;
            }
        } else {
            if (this.toLowerCase() == arr[i].toLowerCase()) {
                return true;
            }
        }
    }
    return false;
}

Date.prototype.setClock = function (hours, minutes) {
    return new Date(new Date((this).setMinutes(minutes)).setHours(hours));
}

Date.prototype.yesterday = function () {
    var date = new Date(this);
    return new Date((date).setDate((date).getDate() - 1))
}

jQuery.fn.scrollTo = function (elem, speed) {
    $(this).animate({
        scrollTop: $(this).scrollTop() - $(this).offset().top + $(elem).offset().top
    }, speed == undefined ? 150 : speed);
    return this;
};

$.fn.textWidth = function () {
    var html_org = $(this).html();
    var html_calc = '<span>' + html_org + '</span>';
    $(this).html(html_calc);
    var width = $(this).find('span:first').width();
    $(this).html(html_org);
    return width;
};

jQuery.fn.getVisible = function (onelem) {
    var $el = $(this);
    
    var wrap = $el.parent();

    //find out the scrolling wrap element
    while (wrap.length && wrap[0].scrollHeight == wrap[0].offsetHeight) {
        wrap = wrap.parent();
    }



    //continue finding visible element inside the wrap
    var visibleElements = [];

    

    for (var i = 0; i < $el.length; i++) {
        var currentElement = $el[i];
        
        var $style = window.getComputedStyle(currentElement, null);

        if (!currentElement) {
            continue;
        } else if (!$style) {
            continue;
        } else if ($style.display === 'none') {
            continue;
        } else {
            if (isVisibleInside(wrap, currentElement)) {
                if (onelem) {
                    onelem($(currentElement));
                } else {
                    visibleElements.push(currentElement);
                }
            }    
        }
    }

    return visibleElements;
};

/*
    LOAD - handles all related to loading of a page
*/

var load = {
    page: function (page) {
        window.location.href = window.location.origin + '/' + page;
    },

    reload: function () {
        window.location.reload();
    }
}


window.alert = (msg) => {
    $('alert[shout] title').html(msg);
    $('alert[shout]').addClass('show');
}

window.unalert = () => {
    $('alert').removeClass('show');
}

window.confirm = (msg, onok) => {
    $('alert[confirm] title').html(msg);
    $('alert[confirm] action[type-ok]').unbind('click').bind('click', () => {
        unalert();
        onok();
    });

    $('alert[confirm]').addClass('show');
}


window.timer = null;

window.msg = (text, status) => {
    clearTimeout(window.timer);

    if (typeof (status) == 'function') {
        status();
        return;
    }

    $('msgpop, msgpop [text]').removeAttr('error').removeAttr('ok');

    $('msgpop [text]').html(text);
    if (status) {
        $('msgpop [status]').show().html('status: ' + status);
    } else {
        $('msgpop [status]').hide();
    }

    $('msgpop').removeClass('bounceOutUp').addClass('on animated bounceInDown');

    window.timer = setTimeout(() => {
        $('msgpop').removeClass('on bounceInDown').addClass('bounceOutUp');
    }, 6000);
}

window.msgerr = (text, status) => {
    window.msg(text, status);

    $('msgpop, msgpop [text]').attr('error', 'on');
}

window.msgwarn = (text, status) => {
    window.msg(text, status);

    $('msgpop, msgpop [text]').attr('warning', 'on');
}

window.msgok = (text, status) => {
    window.msg(text, status);

    $('msgpop, msgpop [text]').attr('ok', 'on');
}



